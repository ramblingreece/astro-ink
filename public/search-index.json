[{"slug":"20211012_email-template-solution-layers","category":"blog","title":"Email Templates and Solution Layers","description":"So you made a change to an email template in Dev and rolled that through to Test but the template is still the old one; what happened?! Read on for this wild ride.","tags":["email-templates","solutions"],"body":"\r\nSo you made a change to an email template in Dev and rolled that through to Test but the template is still the old one; what happened?! Read on for this wild ride.\r\n\r\nOK, so maybe not that wild but very interesting and frustrating. If you have any interest at all in sending templated emails and you have some form of deployment process, where you develop/customise in an unmanaged environment and deploy to a managed production environment (you do have that right?!), then this could be interesting to you.\r\n\r\nRight, first things first, let me show you the issue we are facing here.\r\n\r\nIn Dev the email template looks like this:\r\n![Email Template in Dev environment](/assets/images/2021/email-templates/dev-template.png)\r\n\r\nIn Production the email template looks like this after I have deployed my changes from Dev:\r\n![Email Template in Production environment, looking very different](/assets/images/2021/email-templates/prod-template-before.png)\r\n\r\nObviously something has gone wrong here. As impressive as this ASCII art is, it is not what I want deployed in Production!\r\n\r\nInvestigating further, I can see that the version of the solution in both Dev and Production are the same, so the changes should be there so we need to investigate the layers. In the Production environment, within the maker portal, I can check the solution layers for the specific component as below and see that there is an Unmanaged layer.\r\n\r\n![Screenshot showing how to get to the solution layers screen](/assets/images/2021/email-templates/prod-solution-layers-menu.png)\r\n\r\n![Showing the unmanaged layer on top of managed in Production](/assets/images/2021/email-templates/prod-template-layers-before.png)\r\n\r\nWhat is happening? I am not going in depth, you can read more about it in the Docs here [Power Platform Docs: Solution Layers](https://docs.microsoft.com/en-us/power-platform/alm/solution-layers-alm) but suffice to say someone has made a change to the template in Production which has introduced an unmanaged layer on top of the managed solution layer (the Base solution in the screenshot) which is where my Dev changes are. Unmanaged layers will always override other layers as it always sits on top.\r\n\r\nIn Production, you should not be making changes, these should be brought through a Dev/Test/Production governance process but this does happen so how do I fix it? Microsoft introduced the option to remove an unmanaged layer in the recent past and that is my go to here as if I remove the layer then whatever is deployed in the solution should be what shines through. So let's see what happens...\r\n\r\n![Screenshot showing how to delete the unmanaged layer](/assets/images/2021/email-templates/prod-solution-layers-remove.png)\r\n\r\n![Screenshot showing the prompt you get when attempting to delete the unmanaged layer](/assets/images/2021/email-templates/prod-solution-layers-remove-prompt.png)\r\n\r\n![Screenshot of the error given to say you can't delete the unmanaged layer for an email template even though the system gives you the option to do this! Madness](/assets/images/2021/email-templates/prod-solution-layers-error.png)\r\n\r\nAfter all that I get this lovely error. Why?! WHY?! Why not just tell me up front I can't remove the layer for an email template? That aside, what now?\r\n\r\nThe issue to resolve here is that there are unmanaged customisations that are impeding our managed cusomisations so really we just need to remove them from Prod. The first step has failed, can't remove these for email templates, the second step would be to delete the template and dependent workflow (which is usually what sends the email) then re-import the managed solution to bring them back but this is getting harder and harder as really Microsoft doesn't want you to delete managed components.\r\n\r\nThere are only 2 solutions I have found so far, and neither are really nice, but they do work. The best solution obviously is not to be in the position in the first instance!\r\n\r\n## Solution 1: Embrace Unmanaged\r\n\r\nUnfortunately there is not an easy way to remove the unmanaged layer at this time so this solution embraces it instead!\r\n\r\nIn Dev, create a new solution that will only contain the email templates, add the email templates then export as unmanaged and import that into Prod. That will replace the unmanaged layer in Production with the unmanaged customisations in the imported solution; our Dev changes.\r\n\r\nThis means you need to make sure to include this new solution as part of any deployment process. At least in future if there is a change and you are able to remove the unmanaged layer then this workaround can be removed.\r\n\r\n## Solution 2: Use the upgrade Luke\r\n\r\nFor this we will use the managed solution upgrade option to actually delete the email template and workflows and other dependencies for us. Obviously this is a little more risky in a way, and more time consuming, as we are actually changing our source solution and re-deploying.\r\n\r\nFor this to work you need to have a solution that has the email templates and dependent components, usually workflows, included in a dev environment.\r\n\r\nYou remove the email template(s) and dependent component(s) from that solution, **NOT THE ENVIRONMENT**. This will allow us to package a managed solution that will remove the offensive components on the next deployment, provided you make sure to use the Upgrade option and not the Update one (upgrade is the default these days for manual solution imports).\r\n\r\nImport that new solution into Prod, note the email template(s) and dependent component(s) are gone.\r\n\r\nReturn to the Dev environment and add the template(s) and dependent component(s) back to your solution, export as managed and import into Production to cleanse the environment of unwanted customisations; atleast of the email template variety.\r\n\r\n## Conclusion\r\n\r\nI hope this has been an interesting, useful and maybe even a tiny bit entertaining read. There is definitely more to cover in email templates as even in going through the process to write this article I have noticed a few other \"quirks\" I'd like to cover.\r\n"},{"slug":"introducing-astro-ship-less-javascript","category":"blog","title":"Introducing Astro - Ship Less JavaScript","description":"There's a simple secret to building a faster website — just ship less.","tags":["astro","jam-stack"],"body":"\r\nUnfortunately, modern web development has been trending in the opposite direction—towards more. More JavaScript, more features, more moving parts, and ultimately more complexity needed to keep it all running smoothly.\r\n\r\nToday I'm excited to publicly share Astro: a new kind of static site builder that delivers lightning-fast performance with a modern developer experience. To design Astro, we borrowed the best parts of our favorite tools and then added a few innovations of our own, including:\r\n\r\n- Bring Your Own Framework (BYOF): Build your site using React, Svelte, Vue, Preact, web components, or just plain ol' HTML + JavaScript.\r\n- 100% Static HTML, No JS: Astro renders your entire page to static HTML, removing all JavaScript from your final build by default.\r\n- On-Demand Components: Need some JS? Astro can automatically hydrate interactive components when they become visible on the page. If the user never sees it, they never load it.\r\n- Fully-Featured: Astro supports TypeScript, Scoped CSS, CSS Modules, Sass, Tailwind, Markdown, MDX, and any of your favorite npm packages.\r\n- SEO Enabled: Automatic sitemaps, RSS feeds, pagination and collections take the pain out of SEO and syndication.\r\n\r\n## H1 is good\r\n\r\n### H2 is good too\r\n\r\n> links are better\r\n\r\n[I know](they-are-better)\r\n\r\nThis post marks the first public beta release of Astro. Missing features and bugs are still to be expected at this early stage. There are still some months to go before an official 1.0 release, but there are already several fast sites built with Astro in production today. We would love your early feedback as we move towards a v1.0 release later this year.\r\n\r\n> To learn more about Astro and start building your first site, check out the project README.\r\n\r\n# Example - Syntax Highlighting\r\n\r\n## Shell(Bash)\r\n\r\n```bash\r\n# make a new project directory and jump into it\r\nmkdir my-astro-project && cd $_\r\n\r\n# create a new project with npm\r\nnpm create astro@latest\r\n\r\n# or yarn\r\nyarn create astro\r\n\r\n# or pnpm\r\npnpm create astro@latest\r\n```\r\n\r\n## Python\r\n\r\n```python\r\nprint('hello world')\r\n```\r\n\r\n## Javascript\r\n\r\n```js\r\nconst func = () => {alert(\"hello\")}\r\n```\r\n"},{"slug":"introducing-astro","category":"blog","title":"Introducing Astro - Ship Less JavaScript","description":"There's a simple secret to building a faster website — just ship less.","tags":["astro","jam-stack"],"body":"\r\nUnfortunately, modern web development has been trending in the opposite direction—towards more. More JavaScript, more features, more moving parts, and ultimately more complexity needed to keep it all running smoothly.\r\n\r\nToday I'm excited to publicly share Astro: a new kind of static site builder that delivers lightning-fast performance with a modern developer experience. To design Astro, we borrowed the best parts of our favorite tools and then added a few innovations of our own, including:\r\n\r\n- Bring Your Own Framework (BYOF): Build your site using React, Svelte, Vue, Preact, web components, or just plain ol' HTML + JavaScript.\r\n- 100% Static HTML, No JS: Astro renders your entire page to static HTML, removing all JavaScript from your final build by default.\r\n- On-Demand Components: Need some JS? Astro can automatically hydrate interactive components when they become visible on the page. If the user never sees it, they never load it.\r\n- Fully-Featured: Astro supports TypeScript, Scoped CSS, CSS Modules, Sass, Tailwind, Markdown, MDX, and any of your favorite npm packages.\r\n- SEO Enabled: Automatic sitemaps, RSS feeds, pagination and collections take the pain out of SEO and syndication.\r\n\r\n## H1 is good\r\n\r\n### H2 is good too\r\n\r\n> links are better\r\n\r\n[I know](they-are-better)\r\n\r\nThis post marks the first public beta release of Astro. Missing features and bugs are still to be expected at this early stage. There are still some months to go before an official 1.0 release, but there are already several fast sites built with Astro in production today. We would love your early feedback as we move towards a v1.0 release later this year.\r\n\r\n> To learn more about Astro and start building your first site, check out the project README.\r\n"},{"slug":"islands-architecture-2","category":"blog","title":"Islands Architecture for light-weight FEs","description":"Render HTML pages on the server, and inject placeholders or slots around highly dynamic regions.","tags":["astro","jam-stack","architecture","front-end"],"body":"\r\nhttps://jasonformat.com/islands-architecture/\r\n"},{"slug":"islands-architecture","category":"blog","title":"Islands Architecture","description":"Render HTML pages on the server, and inject placeholders or slots around highly dynamic regions.","tags":["astro","jam-stack","architecture","front-end"],"body":"\r\nhttps://jasonformat.com/islands-architecture/\r\n"},{"slug":"spa-fatigue","category":"blog","title":"Second-guessing the modern web","description":"There is a sweet spot of React - in moderately interactive interfaces..","tags":["architecture","front-end","spa"],"body":"https://macwright.com/2020/05/10/spa-fatigue.html\r\n"},{"slug":"test","category":"blog","title":"Test","description":"Test desc","tags":["test","hello","world","newnew"],"body":"This is a test page\r\n\r\nWith a new line\r\n\r\n```powershell\r\n$test = \"Hello\"\r\n$word = \"World\"\r\nWrite-Host \"$Test$Word\"\r\n```\r\n"}]